# NameSpace
apiVersion: v1
kind: Namespace
metadata:
  name: dify
---
########################################
# dify-config
apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-config
  namespace: dify
data:
  CONSOLE_API_URL: ""
  CONSOLE_WEB_URL: ""
  SERVICE_API_URL: ""
  APP_API_URL: ""
  APP_WEB_URL: ""
  FILES_URL: ""
  LOG_LEVEL: "INFO"
  LOG_FILE: "/app/logs/server.log"
  LOG_FILE_MAX_SIZE: "20"
  LOG_FILE_BACKUP_COUNT: "5"
  LOG_DATEFORMAT: "%Y-%m-%d %H:%M:%S"
  LOG_TZ: "UTC"
  DEBUG: "false"
  FLASK_DEBUG: "false"
  SECRET_KEY: "sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U"
  INIT_PASSWORD: ""
  DEPLOY_ENV: "PRODUCTION"
  CHECK_UPDATE_URL: "https://updates.dify.ai"
  OPENAI_API_BASE: "https://api.openai.com/v1"
  MIGRATION_ENABLED: "true"
  FILES_ACCESS_TIMEOUT: "300"
  ACCESS_TOKEN_EXPIRE_MINUTES: "60"
  REFRESH_TOKEN_EXPIRE_DAYS: "30"
  APP_MAX_ACTIVE_REQUESTS: "0"
  APP_MAX_EXECUTION_TIME: "1200"
  DIFY_BIND_ADDRESS: "0.0.0.0"
  DIFY_PORT: "5001"
  SERVER_WORKER_AMOUNT: "1"
  SERVER_WORKER_CLASS: "gevent"
  SERVER_WORKER_CONNECTIONS: "10"
  CELERY_WORKER_CLASS: ""
  GUNICORN_TIMEOUT: "360"
  CELERY_WORKER_AMOUNT: ""
  CELERY_AUTO_SCALE: "false"
  CELERY_MAX_WORKERS: ""
  CELERY_MIN_WORKERS: ""
  API_TOOL_DEFAULT_CONNECT_TIMEOUT: "10"
  API_TOOL_DEFAULT_READ_TIMEOUT: "60"
  DB_USERNAME: "postgres"
  DB_PASSWORD: "difyai123456"
  DB_HOST: "postgres"
  DB_PORT: "5432"
  DB_DATABASE: "dify"
  SQLALCHEMY_POOL_SIZE: "30"
  SQLALCHEMY_POOL_RECYCLE: "3600"
  SQLALCHEMY_ECHO: "false"
  POSTGRES_MAX_CONNECTIONS: "100"
  POSTGRES_SHARED_BUFFERS: "128MB"
  POSTGRES_WORK_MEM: "4MB"
  POSTGRES_MAINTENANCE_WORK_MEM: "64MB"
  POSTGRES_EFFECTIVE_CACHE_SIZE: "4096MB"
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  REDIS_USERNAME: ""
  REDIS_PASSWORD: "difyai123456"
  REDIS_USE_SSL: "false"
  REDIS_DB: "0"
  REDIS_USE_SENTINEL: "false"
  REDIS_SENTINELS: ""
  REDIS_SENTINEL_SERVICE_NAME: ""
  REDIS_SENTINEL_USERNAME: ""
  REDIS_SENTINEL_PASSWORD: ""
  REDIS_SENTINEL_SOCKET_TIMEOUT: "0.1"
  REDIS_USE_CLUSTERS: "false"
  REDIS_CLUSTERS: ""
  REDIS_CLUSTERS_PASSWORD: ""
  CELERY_BROKER_URL: "redis://:difyai123456@redis:6379/1"
  BROKER_USE_SSL: "false"
  CELERY_USE_SENTINEL: "false"
  CELERY_SENTINEL_MASTER_NAME: ""
  CELERY_SENTINEL_SOCKET_TIMEOUT: "0.1"
  WEB_API_CORS_ALLOW_ORIGINS: "*"
  CONSOLE_CORS_ALLOW_ORIGINS: "*"
  STORAGE_TYPE: "opendal"
  OPENDAL_SCHEME: "fs"
  OPENDAL_FS_ROOT: "storage"
  S3_ENDPOINT: ""
  S3_REGION: "us-east-1"
  S3_BUCKET_NAME: "difyai"
  S3_ACCESS_KEY: ""
  S3_SECRET_KEY: ""
  S3_USE_AWS_MANAGED_IAM: "false"
  AZURE_BLOB_ACCOUNT_NAME: "difyai"
  AZURE_BLOB_ACCOUNT_KEY: "difyai"
  AZURE_BLOB_CONTAINER_NAME: "difyai-container"
  AZURE_BLOB_ACCOUNT_URL: "https://<your_account_name>.blob.core.windows.net"
  GOOGLE_STORAGE_BUCKET_NAME: "your-bucket-name"
  GOOGLE_STORAGE_SERVICE_ACCOUNT_JSON_BASE64: ""
  ALIYUN_OSS_BUCKET_NAME: "your-bucket-name"
  ALIYUN_OSS_ACCESS_KEY: "your-secret-key"
  ALIYUN_OSS_SECRET_KEY: "your-secret-id"
  ALIYUN_OSS_ENDPOINT: "https://oss-cn-hangzhou.aliyuncs.com"
  ALIYUN_OSS_REGION: "cn-hangzhou"
  ALIYUN_OSS_AUTH_VERSION: "v4"
  ALIYUN_OSS_PATH: "dify"
  TENCENT_COS_BUCKET_NAME: "your-bucket-name"
  TENCENT_COS_SECRET_KEY: "your-secret-key"
  TENCENT_COS_SECRET_ID: "your-secret-id"
  TENCENT_COS_REGION: "your-region"
  TENCENT_COS_SCHEME: "your-scheme"
  OCI_ENDPOINT: "https://your-object-storage-namespace.compat.objectstorage.us-ashburn-1.oraclecloud.com"
  OCI_BUCKET_NAME: "your-bucket-name"
  OCI_ACCESS_KEY: "your-access-key"
  OCI_SECRET_KEY: "your-secret-key"
  OCI_REGION: "us-ashburn-1"
  HUAWEI_OBS_BUCKET_NAME: "your-bucket-name"
  HUAWEI_OBS_SECRET_KEY: "your-secret-key"
  HUAWEI_OBS_ACCESS_KEY: "your-access-key"
  HUAWEI_OBS_SERVER: "your-server-url"
  VOLCENGINE_TOS_BUCKET_NAME: "your-bucket-name"
  VOLCENGINE_TOS_SECRET_KEY: "your-secret-key"
  VOLCENGINE_TOS_ACCESS_KEY: "your-access-key"
  VOLCENGINE_TOS_ENDPOINT: "your-server-url"
  VOLCENGINE_TOS_REGION: "your-region"
  BAIDU_OBS_BUCKET_NAME: "your-bucket-name"
  BAIDU_OBS_SECRET_KEY: "your-secret-key"
  BAIDU_OBS_ACCESS_KEY: "your-access-key"
  BAIDU_OBS_ENDPOINT: "your-server-url"
  SUPABASE_BUCKET_NAME: "your-bucket-name"
  SUPABASE_API_KEY: "your-access-key"
  SUPABASE_URL: "your-server-url"
  VECTOR_STORE: "weaviate"
  WEAVIATE_ENDPOINT: "http://weaviate:8080"
  WEAVIATE_API_KEY: "WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih"
  QDRANT_URL: "http://qdrant:6333"
  QDRANT_API_KEY: "difyai123456"
  QDRANT_CLIENT_TIMEOUT: "20"
  QDRANT_GRPC_ENABLED: "false"
  QDRANT_GRPC_PORT: "6334"
  MILVUS_URI: "http://host.docker.internal:19530"
  MILVUS_TOKEN: ""
  MILVUS_USER: ""
  MILVUS_PASSWORD: ""
  MILVUS_ENABLE_HYBRID_SEARCH: "False"
  MYSCALE_HOST: "myscale"
  MYSCALE_PORT: "8123"
  MYSCALE_USER: "default"
  MYSCALE_PASSWORD: ""
  MYSCALE_DATABASE: "dify"
  MYSCALE_FTS_PARAMS: ""
  COUCHBASE_CONNECTION_STRING: "couchbase://couchbase-server"
  COUCHBASE_USER: "Administrator"
  COUCHBASE_PASSWORD: "password"
  COUCHBASE_BUCKET_NAME: "Embeddings"
  COUCHBASE_SCOPE_NAME: "_default"
  PGVECTOR_HOST: "pgvector"
  PGVECTOR_PORT: "5432"
  PGVECTOR_USER: "postgres"
  PGVECTOR_PASSWORD: "difyai123456"
  PGVECTOR_DATABASE: "dify"
  PGVECTOR_MIN_CONNECTION: "1"
  PGVECTOR_MAX_CONNECTION: "5"
  PGVECTOR_PG_BIGM: "false"
  PGVECTOR_PG_BIGM_VERSION: "1.2-20240606"
  PGVECTO_RS_HOST: "pgvecto-rs"
  PGVECTO_RS_PORT: "5432"
  PGVECTO_RS_USER: "postgres"
  PGVECTO_RS_PASSWORD: "difyai123456"
  PGVECTO_RS_DATABASE: "dify"
  ANALYTICDB_KEY_ID: "your-ak"
  ANALYTICDB_KEY_SECRET: "your-sk"
  ANALYTICDB_REGION_ID: "cn-hangzhou"
  ANALYTICDB_INSTANCE_ID: "gp-ab123456"
  ANALYTICDB_ACCOUNT: "testaccount"
  ANALYTICDB_PASSWORD: "testpassword"
  ANALYTICDB_NAMESPACE: "dify"
  ANALYTICDB_NAMESPACE_PASSWORD: "difypassword"
  ANALYTICDB_HOST: "gp-test.aliyuncs.com"
  ANALYTICDB_PORT: "5432"
  ANALYTICDB_MIN_CONNECTION: "1"
  ANALYTICDB_MAX_CONNECTION: "5"
  TIDB_VECTOR_HOST: "tidb"
  TIDB_VECTOR_PORT: "4000"
  TIDB_VECTOR_USER: ""
  TIDB_VECTOR_PASSWORD: ""
  TIDB_VECTOR_DATABASE: "dify"
  TIDB_ON_QDRANT_URL: "http://127.0.0.1"
  TIDB_ON_QDRANT_API_KEY: "dify"
  TIDB_ON_QDRANT_CLIENT_TIMEOUT: "20"
  TIDB_ON_QDRANT_GRPC_ENABLED: "false"
  TIDB_ON_QDRANT_GRPC_PORT: "6334"
  TIDB_PUBLIC_KEY: "dify"
  TIDB_PRIVATE_KEY: "dify"
  TIDB_API_URL: "http://127.0.0.1"
  TIDB_IAM_API_URL: "http://127.0.0.1"
  TIDB_REGION: "regions/aws-us-east-1"
  TIDB_PROJECT_ID: "dify"
  TIDB_SPEND_LIMIT: "100"
  CHROMA_HOST: "127.0.0.1"
  CHROMA_PORT: "8000"
  CHROMA_TENANT: "default_tenant"
  CHROMA_DATABASE: "default_database"
  CHROMA_AUTH_PROVIDER: "chromadb.auth.token_authn.TokenAuthClientProvider"
  CHROMA_AUTH_CREDENTIALS: ""
  ORACLE_USER: "dify"
  ORACLE_PASSWORD: "dify"
  ORACLE_DSN: "oracle:1521/FREEPDB1"
  ORACLE_CONFIG_DIR: "/app/api/storage/wallet"
  ORACLE_WALLET_LOCATION: "/app/api/storage/wallet"
  ORACLE_WALLET_PASSWORD: "dify"
  ORACLE_IS_AUTONOMOUS: "false"
  RELYT_HOST: "db"
  RELYT_PORT: "5432"
  RELYT_USER: "postgres"
  RELYT_PASSWORD: "difyai123456"
  RELYT_DATABASE: "postgres"
  OPENSEARCH_HOST: "opensearch"
  OPENSEARCH_PORT: "9200"
  OPENSEARCH_USER: "admin"
  OPENSEARCH_PASSWORD: "admin"
  OPENSEARCH_SECURE: "true"
  TENCENT_VECTOR_DB_URL: "http://127.0.0.1"
  TENCENT_VECTOR_DB_API_KEY: "dify"
  TENCENT_VECTOR_DB_TIMEOUT: "30"
  TENCENT_VECTOR_DB_USERNAME: "dify"
  TENCENT_VECTOR_DB_DATABASE: "dify"
  TENCENT_VECTOR_DB_SHARD: "1"
  TENCENT_VECTOR_DB_REPLICAS: "2"
  TENCENT_VECTOR_DB_ENABLE_HYBRID_SEARCH: "false"
  ELASTICSEARCH_HOST: "0.0.0.0"
  ELASTICSEARCH_PORT: "9200"
  ELASTICSEARCH_USERNAME: "elastic"
  ELASTICSEARCH_PASSWORD: "elastic"
  KIBANA_PORT: "5601"
  BAIDU_VECTOR_DB_ENDPOINT: "http://127.0.0.1:5287"
  BAIDU_VECTOR_DB_CONNECTION_TIMEOUT_MS: "30000"
  BAIDU_VECTOR_DB_ACCOUNT: "root"
  BAIDU_VECTOR_DB_API_KEY: "dify"
  BAIDU_VECTOR_DB_DATABASE: "dify"
  BAIDU_VECTOR_DB_SHARD: "1"
  BAIDU_VECTOR_DB_REPLICAS: "3"
  VIKINGDB_ACCESS_KEY: "your-ak"
  VIKINGDB_SECRET_KEY: "your-sk"
  VIKINGDB_REGION: "cn-shanghai"
  VIKINGDB_HOST: "api-vikingdb.xxx.volces.com"
  VIKINGDB_SCHEMA: "http"
  VIKINGDB_CONNECTION_TIMEOUT: "30"
  VIKINGDB_SOCKET_TIMEOUT: "30"
  LINDORM_URL: "http://lindorm:30070"
  LINDORM_USERNAME: "lindorm"
  LINDORM_PASSWORD: "lindorm"
  OCEANBASE_VECTOR_HOST: "oceanbase"
  OCEANBASE_VECTOR_PORT: "2881"
  OCEANBASE_VECTOR_USER: "root@test"
  OCEANBASE_VECTOR_PASSWORD: "difyai123456"
  OCEANBASE_VECTOR_DATABASE: "test"
  OCEANBASE_CLUSTER_NAME: "difyai"
  OCEANBASE_MEMORY_LIMIT: "6G"
  OCEANBASE_ENABLE_HYBRID_SEARCH: "false"
  OPENGAUSS_HOST: "opengauss"
  OPENGAUSS_PORT: "6600"
  OPENGAUSS_USER: "postgres"
  OPENGAUSS_PASSWORD: "Dify@123"
  OPENGAUSS_DATABASE: "dify"
  OPENGAUSS_MIN_CONNECTION: "1"
  OPENGAUSS_MAX_CONNECTION: "5"
  OPENGAUSS_ENABLE_PQ: "false"
  UPSTASH_VECTOR_URL: "https://xxx-vector.upstash.io"
  UPSTASH_VECTOR_TOKEN: "dify"
  TABLESTORE_ENDPOINT: "https://instance-name.cn-hangzhou.ots.aliyuncs.com"
  TABLESTORE_INSTANCE_NAME: "instance-name"
  TABLESTORE_ACCESS_KEY_ID: "xxx"
  TABLESTORE_ACCESS_KEY_SECRET: "xxx"
  UPLOAD_FILE_SIZE_LIMIT: "15"
  UPLOAD_FILE_BATCH_LIMIT: "5"
  ETL_TYPE: "dify"
  UNSTRUCTURED_API_URL: ""
  UNSTRUCTURED_API_KEY: ""
  SCARF_NO_ANALYTICS: "true"
  PROMPT_GENERATION_MAX_TOKENS: "512"
  CODE_GENERATION_MAX_TOKENS: "1024"
  PLUGIN_BASED_TOKEN_COUNTING_ENABLED: "false"
  MULTIMODAL_SEND_FORMAT: "base64"
  UPLOAD_IMAGE_FILE_SIZE_LIMIT: "10"
  UPLOAD_VIDEO_FILE_SIZE_LIMIT: "100"
  UPLOAD_AUDIO_FILE_SIZE_LIMIT: "50"
  SENTRY_DSN: ""
  API_SENTRY_DSN: ""
  API_SENTRY_TRACES_SAMPLE_RATE: "1.0"
  API_SENTRY_PROFILES_SAMPLE_RATE: "1.0"
  WEB_SENTRY_DSN: ""
  NOTION_INTEGRATION_TYPE: "public"
  NOTION_CLIENT_SECRET: ""
  NOTION_CLIENT_ID: ""
  NOTION_INTERNAL_SECRET: ""
  MAIL_TYPE: "resend"
  MAIL_DEFAULT_SEND_FROM: ""
  RESEND_API_URL: "https://api.resend.com"
  RESEND_API_KEY: "your-resend-api-key"
  SMTP_SERVER: ""
  SMTP_PORT: "465"
  SMTP_USERNAME: ""
  SMTP_PASSWORD: ""
  SMTP_USE_TLS: "true"
  SMTP_OPPORTUNISTIC_TLS: "false"
  INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH: "4000"
  INVITE_EXPIRY_HOURS: "72"
  RESET_PASSWORD_TOKEN_EXPIRY_MINUTES: "5"
  CODE_EXECUTION_ENDPOINT: "http://sandbox:8194"
  CODE_EXECUTION_API_KEY: "sandbox"
  CODE_MAX_NUMBER: "9223372036854775807"
  CODE_MIN_NUMBER: "-9223372036854775808"
  CODE_MAX_DEPTH: "5"
  CODE_MAX_PRECISION: "20"
  CODE_MAX_STRING_LENGTH: "80000"
  CODE_MAX_STRING_ARRAY_LENGTH: "30"
  CODE_MAX_OBJECT_ARRAY_LENGTH: "30"
  CODE_MAX_NUMBER_ARRAY_LENGTH: "1000"
  CODE_EXECUTION_CONNECT_TIMEOUT: "10"
  CODE_EXECUTION_READ_TIMEOUT: "60"
  CODE_EXECUTION_WRITE_TIMEOUT: "10"
  TEMPLATE_TRANSFORM_MAX_LENGTH: "80000"
  WORKFLOW_MAX_EXECUTION_STEPS: "500"
  WORKFLOW_MAX_EXECUTION_TIME: "1200"
  WORKFLOW_CALL_MAX_DEPTH: "5"
  MAX_VARIABLE_SIZE: "204800"
  WORKFLOW_PARALLEL_DEPTH_LIMIT: "3"
  WORKFLOW_FILE_UPLOAD_LIMIT: "10"
  HTTP_REQUEST_NODE_MAX_BINARY_SIZE: "10485760"
  HTTP_REQUEST_NODE_MAX_TEXT_SIZE: "1048576"
  HTTP_REQUEST_NODE_SSL_VERIFY: "True"
  SSRF_PROXY_HTTP_URL: "http://ssrf:3128"
  SSRF_PROXY_HTTPS_URL: "http://ssrf:3128"
  LOOP_NODE_MAX_COUNT: "100"
  MAX_TOOLS_NUM: "10"
  MAX_PARALLEL_LIMIT: "10"
  MAX_ITERATIONS_NUM: "5"
  TEXT_GENERATION_TIMEOUT_MS: "60000"
  PGUSER: "postgres"
  POSTGRES_PASSWORD: "difyai123456"
  POSTGRES_DB: "dify"
  PGDATA: "/var/lib/postgresql/data/pgdata"
  SANDBOX_API_KEY: "sandbox"
  SANDBOX_GIN_MODE: "release"
  SANDBOX_WORKER_TIMEOUT: "15"
  SANDBOX_ENABLE_NETWORK: "true"
  SANDBOX_HTTP_PROXY: "http://ssrf_proxy:3128"
  SANDBOX_HTTPS_PROXY: "http://ssrf_proxy:3128"
  SANDBOX_PORT: "8194"
  WEAVIATE_PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
  WEAVIATE_QUERY_DEFAULTS_LIMIT: "25"
  WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "false"
  WEAVIATE_DEFAULT_VECTORIZER_MODULE: "none"
  WEAVIATE_CLUSTER_HOSTNAME: "node1"
  WEAVIATE_AUTHENTICATION_APIKEY_ENABLED: "true"
  WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS: "WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih"
  WEAVIATE_AUTHENTICATION_APIKEY_USERS: "hello@dify.ai"
  WEAVIATE_AUTHORIZATION_ADMINLIST_ENABLED: "true"
  WEAVIATE_AUTHORIZATION_ADMINLIST_USERS: "hello@dify.ai"
  CHROMA_SERVER_AUTHN_CREDENTIALS: "difyai123456"
  CHROMA_SERVER_AUTHN_PROVIDER: "chromadb.auth.token_authn.TokenAuthenticationServerProvider"
  CHROMA_IS_PERSISTENT: "TRUE"
  ORACLE_PWD: "Dify123456"
  ORACLE_CHARACTERSET: "AL32UTF8"
  ETCD_AUTO_COMPACTION_MODE: "revision"
  ETCD_AUTO_COMPACTION_RETENTION: "1000"
  ETCD_QUOTA_BACKEND_BYTES: "4294967296"
  ETCD_SNAPSHOT_COUNT: "50000"
  MINIO_ACCESS_KEY: "minioadmin"
  MINIO_SECRET_KEY: "minioadmin"
  ETCD_ENDPOINTS: "etcd:2379"
  MINIO_ADDRESS: "minio:9000"
  MILVUS_AUTHORIZATION_ENABLED: "true"
  PGVECTOR_PGUSER: "postgres"
  PGVECTOR_POSTGRES_PASSWORD: "difyai123456"
  PGVECTOR_POSTGRES_DB: "dify"
  PGVECTOR_PGDATA: "/var/lib/postgresql/data/pgdata"
  OPENSEARCH_DISCOVERY_TYPE: "single-node"
  OPENSEARCH_BOOTSTRAP_MEMORY_LOCK: "true"
  OPENSEARCH_JAVA_OPTS_MIN: "512m"
  OPENSEARCH_JAVA_OPTS_MAX: "1024m"
  OPENSEARCH_INITIAL_ADMIN_PASSWORD: "Qazwsxedc!@#123"
  OPENSEARCH_MEMLOCK_SOFT: "-1"
  OPENSEARCH_MEMLOCK_HARD: "-1"
  OPENSEARCH_NOFILE_SOFT: "65536"
  OPENSEARCH_NOFILE_HARD: "65536"
  NGINX_SERVER_NAME: "_"
  NGINX_HTTPS_ENABLED: "false"
  NGINX_PORT: "80"
  NGINX_SSL_PORT: "443"
  NGINX_SSL_CERT_FILENAME: "dify.crt"
  NGINX_SSL_CERT_KEY_FILENAME: "dify.key"
  NGINX_SSL_PROTOCOLS: "TLSv1.1 TLSv1.2 TLSv1.3"
  NGINX_WORKER_PROCESSES: "auto"
  NGINX_CLIENT_MAX_BODY_SIZE: "15M"
  NGINX_KEEPALIVE_TIMEOUT: "65"
  NGINX_PROXY_READ_TIMEOUT: "3600s"
  NGINX_PROXY_SEND_TIMEOUT: "3600s"
  NGINX_ENABLE_CERTBOT_CHALLENGE: "false"
  CERTBOT_EMAIL: "your_email@example.com"
  CERTBOT_DOMAIN: "your_domain.com"
  CERTBOT_OPTIONS: ""
  SSRF_HTTP_PORT: "3128"
  SSRF_COREDUMP_DIR: "/var/spool/squid"
  SSRF_REVERSE_PROXY_PORT: "8194"
  SSRF_SANDBOX_HOST: "sandbox"
  SSRF_DEFAULT_TIME_OUT: "5"
  SSRF_DEFAULT_CONNECT_TIME_OUT: "5"
  SSRF_DEFAULT_READ_TIME_OUT: "5"
  SSRF_DEFAULT_WRITE_TIME_OUT: "5"
  EXPOSE_NGINX_PORT: "80"
  EXPOSE_NGINX_SSL_PORT: "443"
  POSITION_TOOL_PINS: ""
  POSITION_TOOL_INCLUDES: ""
  POSITION_TOOL_EXCLUDES: ""
  POSITION_PROVIDER_PINS: ""
  POSITION_PROVIDER_INCLUDES: ""
  POSITION_PROVIDER_EXCLUDES: ""
  CSP_WHITELIST: ""
  CREATE_TIDB_SERVICE_JOB_ENABLED: "false"
  MAX_SUBMIT_COUNT: "100"
  TOP_K_MAX_VALUE: ""
  DB_PLUGIN_DATABASE: "dify_plugin"
  EXPOSE_PLUGIN_DAEMON_PORT: "5002"
  PLUGIN_DAEMON_PORT: "5002"
  PLUGIN_DAEMON_KEY: "lYkiYYT6owG+71oLerGzA7GXCgOT++6ovaezWAjpCjf+Sjc3ZtU+qUEi"
  PLUGIN_DAEMON_URL: "http://plugin-daemon:5002"
  PLUGIN_MAX_PACKAGE_SIZE: "52428800"
  PLUGIN_PPROF_ENABLED: "false"
  PLUGIN_DEBUGGING_HOST: "0.0.0.0"
  PLUGIN_DEBUGGING_PORT: "5003"
  EXPOSE_PLUGIN_DEBUGGING_HOST: "localhost"
  EXPOSE_PLUGIN_DEBUGGING_PORT: "5003"
  PLUGIN_DIFY_INNER_API_KEY: "QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1"
  PLUGIN_DIFY_INNER_API_URL: "http://api:5001"
  ENDPOINT_URL_TEMPLATE: "http://localhost/e/{hook_id}"
  MARKETPLACE_ENABLED: "true"
  MARKETPLACE_API_URL: "https://marketplace.dify.ai"
  MARKETPLACE_URL: "https://marketplace.dify.ai"
  FORCE_VERIFYING_SIGNATURE: "true"
  PLUGIN_PYTHON_ENV_INIT_TIMEOUT: "120"
  PLUGIN_MAX_EXECUTION_TIMEOUT: "600"
  PIP_MIRROR_URL: ""
  NEXT_TELEMETRY_DISABLED: ""
  PM2_INSTANCES: "2"
  PLUGIN_WORKING_PATH: "/app/storage/cwd"
  PLUGIN_STORAGE_TYPE: "local"
  PLUGIN_STORAGE_LOCAL_ROOT: "/app/storage"
  PLUGIN_INSTALLED_PATH: "plugin"
  PLUGIN_PACKAGE_CACHE_PATH: "plugin_packages"
  PLUGIN_MEDIA_CACHE_PATH: "assets"
  PLUGIN_STORAGE_OSS_BUCKET: ""
  PLUGIN_S3_USE_AWS_MANAGED_IAM: "true"
  PLUGIN_S3_ENDPOINT: ""
  PLUGIN_S3_USE_PATH_STYLE: "true"
  PLUGIN_AWS_ACCESS_KEY: ""
  PLUGIN_AWS_SECRET_KEY: ""
  PLUGIN_AWS_REGION: ""
  PLUGIN_AZURE_BLOB_STORAGE_CONTAINER_NAME: ""
  PLUGIN_AZURE_BLOB_STORAGE_CONNECTION_STRING: ""
  PLUGIN_TENCENT_COS_SECRET_KEY: ""
  PLUGIN_TENCENT_COS_SECRET_ID: ""
  PLUGIN_TENCENT_COS_REGION: ""
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: postgres
  name: postgres
  namespace: dify
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: postgres
  name: postgres
  namespace: dify
rules:
- apiGroups:
  - "*"
  resources:
  - "*"
  verbs:
  - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: postgres
  name: postgres
  namespace: dify
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: postgres
subjects:
- kind: ServiceAccount
  name: postgres

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: dify
spec:
  selector:
    matchLabels:
      app: postgres
  serviceName: "postgres"
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      serviceAccountName: postgres
      terminationGracePeriodSeconds: 10
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: postgres
          image: postgres:15-alpine
#          envFrom:
#          - configMapRef:
#              name: dify-config
          env:
            - name: PGUSER
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PGUSER
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: POSTGRES_DB
            - name: PGDATA
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PGDATA
          ports:
            - containerPort: 5432
              name: postgres-port
          livenessProbe:
            exec:
              command:
                - "pg_isready"
                - "-U"
                - "$(PGUSER)"
                - "-d"
                - "$(POSTGRES_DB)"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 10
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db-data
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-pvc
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: dify
spec:
  selector:
    app: postgres
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgres
    protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: redis
  name: redis
  namespace: dify
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: redis
  name: redis
  namespace: dify
rules:
- apiGroups:
  - "*"
  resources:
  - "*"
  verbs:
  - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: redis
  name: redis
  namespace: dify
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: redis
subjects:
- kind: ServiceAccount
  name: redis

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: dify
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: "redis"
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      terminationGracePeriodSeconds: 10
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: redis
      containers:
      - name: redis
        image: redis:6-alpine
        envFrom:
          - configMapRef:
              name: dify-config
        env:
          - name: REDISCLI_AUTH
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
          name: redis-p
        command: [ "redis-server", "--save", "20", "1", "--loglevel", "warning", "--requirepass", "$(REDIS_PASSWORD)" ]
        livenessProbe:
          exec:
            command:
              - redis-cli
              - ping
        volumeMounts:
          - mountPath: /data
            name: redis-data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: dify
spec:
  selector:
    app: redis
  type: ClusterIP
  clusterIP: None
  ports:
  - name: redis
    protocol: TCP
    port: 6379
    targetPort: 6379
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: weaviate
  name: weaviate
  namespace: dify

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: weaviate
  name: weaviate
  namespace: dify
rules:
- apiGroups:
  - "*"
  resources:
  - "*"
  verbs:
  - "*"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: weaviate
  name: weaviate
  namespace: dify
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: weaviate
subjects:
- kind: ServiceAccount
  name: weaviate

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: weaviate
  namespace: dify
spec:
  selector:
    matchLabels:
      app: weaviate
  serviceName: weaviate
  replicas: 1
  template:
    metadata:
      labels:
        app: weaviate
    spec:
      terminationGracePeriodSeconds: 10
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: weaviate
      containers:
        - name: weaviate
          image: semitechnologies/weaviate:1.19.0
          ports:
            - containerPort: 8080
              name: weaviate-p
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 102Mi
          env:
          - name: PERSISTENCE_DATA_PATH
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: WEAVIATE_PERSISTENCE_DATA_PATH
          - name: QUERY_DEFAULTS_LIMIT
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: WEAVIATE_QUERY_DEFAULTS_LIMIT
          - name: AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED
          - name: DEFAULT_VECTORIZER_MODULE
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: WEAVIATE_DEFAULT_VECTORIZER_MODULE
          - name: CLUSTER_HOSTNAME
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: WEAVIATE_CLUSTER_HOSTNAME
          - name: AUTHENTICATION_APIKEY_ENABLED
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: WEAVIATE_AUTHENTICATION_APIKEY_ENABLED
          - name: AUTHENTICATION_APIKEY_ALLOWED_KEYS
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS
          - name: AUTHENTICATION_APIKEY_USERS
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: WEAVIATE_AUTHENTICATION_APIKEY_USERS
          - name: AUTHORIZATION_ADMINLIST_ENABLED
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: WEAVIATE_AUTHORIZATION_ADMINLIST_ENABLED
          - name: AUTHORIZATION_ADMINLIST_USERS
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: WEAVIATE_AUTHORIZATION_ADMINLIST_USERS
          volumeMounts:
            - mountPath: /var/lib/weaviate
              name: weaviate-data
      volumes:
        - name: weaviate-data
          persistentVolumeClaim:
            claimName: weaviate-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: weaviate-pvc
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: weaviate
  namespace: dify
spec:
  selector:
    app: weaviate
  type: ClusterIP
  clusterIP: None
  ports:
  - name: weaviate
    protocol: TCP
    port: 8080
    targetPort: 8080

---
apiVersion: v1
data:
  python-requirements.txt: ""
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: sandbox
  name: sandbox-cm0
  namespace: dify
---
apiVersion: v1
data:
  config.yaml: |
    app:
      port: 8194
      debug: True
      key: sandbox
    max_workers: 4
    max_requests: 50
    worker_timeout: 5
    python_path: /usr/local/bin/python3
    enable_network: True # please make sure there is no network risk in your environment
    allowed_syscalls: # please leave it empty if you have no idea how seccomp works
    proxy:
      socks5: ''
      http: ''
      https: ''
  config.yaml.example: |
    app:
      port: 8194
      debug: True
      key: sandbox
    max_workers: 4
    max_requests: 50
    worker_timeout: 5
    python_path: /usr/local/bin/python3
    python_lib_path:
      - /usr/local/lib/python3.10
      - /usr/lib/python3.10
      - /usr/lib/python3
      - /usr/lib/x86_64-linux-gnu
      - /etc/ssl/certs/ca-certificates.crt
      - /etc/nsswitch.conf
      - /etc/hosts
      - /etc/resolv.conf
      - /run/systemd/resolve/stub-resolv.conf
      - /run/resolvconf/resolv.conf
      - /etc/localtime
      - /usr/share/zoneinfo
      - /etc/timezone
      # add more paths if needed
    python_pip_mirror_url: https://pypi.tuna.tsinghua.edu.cn/simple
    nodejs_path: /usr/local/bin/node
    enable_network: True
    allowed_syscalls:
      - 1
      - 2
      - 3
      # add all the syscalls which you require
    proxy:
      socks5: ''
      http: ''
      https: ''
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: sandbox
  name: sandbox-cm1
  namespace: dify
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sandbox
  namespace: dify
  labels:
    app: sandbox
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: sandbox
  template:
    metadata:
      labels:
        app: sandbox
    spec:
      automountServiceAccountToken: false
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - name: sandbox
        image: langgenius/dify-sandbox:0.2.11
        env:
          - name: API_KEY
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SANDBOX_API_KEY
          - name: GIN_MODE
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SANDBOX_GIN_MODE
          - name: WORKER_TIMEOUT
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SANDBOX_WORKER_TIMEOUT
          - name: ENABLE_NETWORK
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SANDBOX_ENABLE_NETWORK
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SANDBOX_HTTP_PROXY
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SANDBOX_HTTPS_PROXY
          - name: SANDBOX_PORT
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SANDBOX_PORT
        livenessProbe:
          exec:
            command:
              - "curl"
              - "-f"
              - "http://localhost:8194/health"
        ports:
          - containerPort: 8194
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - mountPath: /dependencies
            name: sandbox-cm0
          - mountPath: /conf
            name: sandbox-cm1
      volumes:
        - configMap:
            name: sandbox-cm0
          name: sandbox-cm0
        - configMap:
            name: sandbox-cm1
          name: sandbox-cm1
---

apiVersion: v1
kind: Service
metadata:
  name: sandbox
  namespace: dify
spec:
  ports:
  - port: 8194
    targetPort: 8194
    protocol: TCP
    name: sandbox
  type: ClusterIP
  clusterIP: None
  selector:
    app: sandbox
---
apiVersion: v1
data:
  squid.conf.template: |
    acl localnet src 0.0.0.1-0.255.255.255	# RFC 1122 "this" network (LAN)
    acl localnet src 10.0.0.0/8		# RFC 1918 local private network (LAN)
    acl localnet src 100.64.0.0/10		# RFC 6598 shared address space (CGN)
    acl localnet src 169.254.0.0/16 	# RFC 3927 link-local (directly plugged) machines
    acl localnet src 172.16.0.0/12		# RFC 1918 local private network (LAN)
    acl localnet src 192.168.0.0/16		# RFC 1918 local private network (LAN)
    acl localnet src fc00::/7       	# RFC 4193 local private network range
    acl localnet src fe80::/10      	# RFC 4291 link-local (directly plugged) machines
    acl SSL_ports port 443
    # acl SSL_ports port 1025-65535   # Enable the configuration to resolve this issue: https://github.com/langgenius/dify/issues/12792
    acl Safe_ports port 80		# http
    acl Safe_ports port 21		# ftp
    acl Safe_ports port 443		# https
    acl Safe_ports port 70		# gopher
    acl Safe_ports port 210		# wais
    acl Safe_ports port 1025-65535	# unregistered ports
    acl Safe_ports port 280		# http-mgmt
    acl Safe_ports port 488		# gss-http
    acl Safe_ports port 591		# filemaker
    acl Safe_ports port 777		# multiling http
    acl CONNECT method CONNECT
    http_access deny !Safe_ports
    http_access deny CONNECT !SSL_ports
    http_access allow localhost manager
    http_access deny manager
    http_access allow localhost
    http_access allow localnet
    http_access deny all
    
    ################################## Proxy Server ################################
    http_port ${HTTP_PORT}
    coredump_dir ${COREDUMP_DIR}
    refresh_pattern ^ftp:		1440	20%	10080
    refresh_pattern ^gopher:	1440	0%	1440
    refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
    refresh_pattern \/(Packages|Sources)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
    refresh_pattern \/Release(|\.gpg)$ 0 0% 0 refresh-ims
    refresh_pattern \/InRelease$ 0 0% 0 refresh-ims
    refresh_pattern \/(Translation-.*)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
    refresh_pattern .		0	20%	4320
    
    
    # cache_dir ufs /var/spool/squid 100 16 256
    # upstream proxy, set to your own upstream proxy IP to avoid SSRF attacks
    # cache_peer 172.1.1.1 parent 3128 0 no-query no-digest no-netdb-exchange default 
    
    ################################## Reverse Proxy To Sandbox ################################
    http_port ${REVERSE_PROXY_PORT} accel vhost
    cache_peer ${SANDBOX_HOST} parent ${SANDBOX_PORT} 0 no-query originserver
    acl src_all src all
    http_access allow src_all

kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: ssrf-proxy
  name: ssrf-proxy-cm0
  namespace: dify
---
apiVersion: v1
data:
  docker-entrypoint.sh: |
    #!/bin/bash

    # Modified based on Squid OCI image entrypoint

    # This entrypoint aims to forward the squid logs to stdout to assist users of
    # common container related tooling (e.g., kubernetes, docker-compose, etc) to
    # access the service logs.

    # Moreover, it invokes the squid binary, leaving all the desired parameters to
    # be provided by the "command" passed to the spawned container. If no command
    # is provided by the user, the default behavior (as per the CMD statement in
    # the Dockerfile) will be to use Ubuntu's default configuration [1] and run
    # squid with the "-NYC" options to mimic the behavior of the Ubuntu provided
    # systemd unit.

    # [1] The default configuration is changed in the Dockerfile to allow local
    # network connections. See the Dockerfile for further information.

    echo "[ENTRYPOINT] re-create snakeoil self-signed certificate removed in the build process"
    if [ ! -f /etc/ssl/private/ssl-cert-snakeoil.key ]; then
        /usr/sbin/make-ssl-cert generate-default-snakeoil --force-overwrite > /dev/null 2>&1
    fi

    tail -F /var/log/squid/access.log 2>/dev/null &
    tail -F /var/log/squid/error.log 2>/dev/null &
    tail -F /var/log/squid/store.log 2>/dev/null &
    tail -F /var/log/squid/cache.log 2>/dev/null &

    # Replace environment variables in the template and output to the squid.conf
    echo "[ENTRYPOINT] replacing environment variables in the template"
    awk '{
        while(match($0, /\${[A-Za-z_][A-Za-z_0-9]*}/)) {
            var = substr($0, RSTART+2, RLENGTH-3)
            val = ENVIRON[var]
            $0 = substr($0, 1, RSTART-1) val substr($0, RSTART+RLENGTH)
        }
        print
    }' /etc/squid/squid.conf.template > /etc/squid/squid.conf

    /usr/sbin/squid -Nz
    echo "[ENTRYPOINT] starting squid"
    /usr/sbin/squid -f /etc/squid/squid.conf -NYC 1
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: ssrf-proxy
  name: ssrf-proxy-cm1
  namespace: dify
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  ssrf
  namespace: dify
  labels:
    app:  ssrf
spec:
  selector:
    matchLabels:
      app: ssrf
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  ssrf
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - name:  ssrf
        image:  ubuntu/squid:latest
        envFrom:
          - configMapRef:
              name: dify-config
        env:
          - name: HTTP_PORT
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SSRF_HTTP_PORT
          - name: COREDUMP_DIR
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SSRF_COREDUMP_DIR
          - name: REVERSE_PROXY_PORT
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SSRF_REVERSE_PROXY_PORT
          - name: SANDBOX_HOST
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SSRF_SANDBOX_HOST
          - name: SANDBOX_PORT
            valueFrom:
              configMapKeyRef:
                name: dify-config
                key: SANDBOX_PORT
        ports:
          - containerPort: 3128
            name: ssrf
        volumeMounts:
          - mountPath: /etc/squid/squid.conf.template
            subPath: squid.conf.template
            name: ssrf-proxy-cm0
          - mountPath: /tmp/
            name: ssrf-proxy-cm1
        command: [ "sh", "-c", "cp /tmp/docker-entrypoint.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
      volumes:
        - configMap:
            name: ssrf-proxy-cm0
          name: ssrf-proxy-cm0
        - configMap:
            name: ssrf-proxy-cm1
          name: ssrf-proxy-cm1
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: ssrf
  namespace: dify
spec:
  selector:
    app: ssrf
  ports:
  - protocol: TCP
    port: 3128
    targetPort: 3128
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: api
  labels:
    app.kubernetes.io/instance: api
    app: api
  namespace: dify
spec:
  replicas: 1
  revisionHistoryLimit: 1
  minReadySeconds: 10
  serviceName: api
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: api
          image: langgenius/dify-api:1.2.0
          envFrom:
            - configMapRef:
                name: dify-config
          env:
            - name: MODE
              value: "api"
            - name: SENTRY_DSN
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: API_SENTRY_DSN
            - name: SENTRY_TRACES_SAMPLE_RATE
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: API_SENTRY_TRACES_SAMPLE_RATE
            - name: SENTRY_PROFILES_SAMPLE_RATE
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: API_SENTRY_PROFILES_SAMPLE_RATE
            - name: PLUGIN_REMOTE_INSTALL_HOST
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: EXPOSE_PLUGIN_DEBUGGING_HOST
            - name: PLUGIN_REMOTE_INSTALL_PORT
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: EXPOSE_PLUGIN_DEBUGGING_PORT
            - name: PLUGIN_MAX_PACKAGE_SIZE
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_MAX_PACKAGE_SIZE
            - name: INNER_API_KEY_FOR_PLUGIN
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_DIFY_INNER_API_KEY
          ports:
            - containerPort: 5001
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /app/api/storage
              name: api-storage
      volumes:
        - name: api-storage
          persistentVolumeClaim:
            claimName: api-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: api-pvc
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: dify
spec:
  ports:
  - port: 5001
    targetPort: 5001
    protocol: TCP
    name: api
  type: ClusterIP
  selector:
    app: api
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: worker
  namespace: dify
  labels:
    app: worker
    app.kubernetes.io/instance: worker
spec:
  serviceName: worker
  replicas: 1
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: worker
          image: langgenius/dify-api:1.2.0
          ports:
            - containerPort: 5001
              protocol: TCP
          envFrom:
            - configMapRef:
                name: dify-config
          env:
            - name: MODE
              value: "worker"
            - name: SENTRY_DSN
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: API_SENTRY_DSN
            - name: SENTRY_TRACES_SAMPLE_RATE
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: API_SENTRY_TRACES_SAMPLE_RATE
            - name: SENTRY_PROFILES_SAMPLE_RATE
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: API_SENTRY_PROFILES_SAMPLE_RATE
            - name: INNER_API_KEY_FOR_PLUGIN
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_DIFY_INNER_API_KEY

          volumeMounts:
            - mountPath: /app/api/storage
              name: worker-storage
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      volumes:
        - name: worker-storage
          persistentVolumeClaim:
            claimName: api-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: worker
  namespace: dify
spec:
  ports:
  - protocol: TCP
    port: 5001
    targetPort: 5001
  selector:
    app: worker
  type: ClusterIP


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: dify
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      automountServiceAccountToken: false
      restartPolicy: Always
      containers:
      - name: web
        image: langgenius/dify-web:1.2.0
        envFrom:
          - configMapRef:
              name: dify-config
        env:
        - name: SENTRY_DSN
          valueFrom:
            configMapKeyRef:
              name: dify-config
              key: WEB_SENTRY_DSN
        ports:
        - containerPort: 3000
        imagePullPolicy: IfNotPresent


---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: dify
spec:
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: web
  type: ClusterIP
  selector:
    app: web
---
apiVersion: v1
data:
  nginx.conf.template: |-
    # Please do not directly edit this file. Instead, modify the .env variables related to NGINX configuration.

    user  nginx;
    worker_processes  ${NGINX_WORKER_PROCESSES};

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  ${NGINX_KEEPALIVE_TIMEOUT};

        #gzip  on;
        client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE};

        include /etc/nginx/conf.d/*.conf;
    }
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: nginx
  name: nginx-cm0
  namespace: dify
---
apiVersion: v1
data:
  proxy.conf.template: |
    # Please do not directly edit this file. Instead, modify the .env variables related to NGINX configuration.

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_buffering off;
    proxy_read_timeout ${NGINX_PROXY_READ_TIMEOUT};
    proxy_send_timeout ${NGINX_PROXY_SEND_TIMEOUT};
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: nginx
  name: nginx-cm1
  namespace: dify
---
apiVersion: v1
data:
  https.conf.template: |-
    # Please do not directly edit this file. Instead, modify the .env variables related to NGINX configuration.

    listen ${NGINX_SSL_PORT} ssl;
    ssl_certificate ${SSL_CERTIFICATE_PATH};
    ssl_certificate_key ${SSL_CERTIFICATE_KEY_PATH};
    ssl_protocols ${NGINX_SSL_PROTOCOLS};
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: nginx
  name: nginx-cm2
  namespace: dify
---
apiVersion: v1
data:
  default.conf.template: |
    # Please do not directly edit this file. Instead, modify the .env variables related to NGINX configuration.

    server {
        listen ${NGINX_PORT};
        server_name ${NGINX_SERVER_NAME};

        location /console/api {
          proxy_pass http://api:5001;
          include proxy.conf;
        }

        location /api {
          proxy_pass http://api:5001;
          include proxy.conf;
        }

        location /v1 {
          proxy_pass http://api:5001;
          include proxy.conf;
        }

        location /files {
          proxy_pass http://api:5001;
          include proxy.conf;
        }

        location /explore {
          proxy_pass http://web:3000;
          include proxy.conf;
        }

        location /e/ {
          proxy_pass http://plugin-daemon:5002;
          proxy_set_header Dify-Hook-Url $scheme://$host$request_uri;
          include proxy.conf;
        }

        location / {
          proxy_pass http://web:3000;
          include proxy.conf;
        }

        # placeholder for acme challenge location
        ${ACME_CHALLENGE_LOCATION}

        # placeholder for https config defined in https.conf.template
        ${HTTPS_CONFIG}
    }
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: nginx
  name: nginx-cm3
  namespace: dify
---
apiVersion: v1
data:
  docker-entrypoint.sh: |-
    #!/bin/bash

    if [ "${NGINX_HTTPS_ENABLED}" = "true" ]; then
        # Check if the certificate and key files for the specified domain exist
        if [ -n "${CERTBOT_DOMAIN}" ] && \
           [ -f "/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_FILENAME}" ] && \
           [ -f "/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_KEY_FILENAME}" ]; then
            SSL_CERTIFICATE_PATH="/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_FILENAME}"
            SSL_CERTIFICATE_KEY_PATH="/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_KEY_FILENAME}"
        else
            SSL_CERTIFICATE_PATH="/etc/ssl/${NGINX_SSL_CERT_FILENAME}"
            SSL_CERTIFICATE_KEY_PATH="/etc/ssl/${NGINX_SSL_CERT_KEY_FILENAME}"
        fi
        export SSL_CERTIFICATE_PATH
        export SSL_CERTIFICATE_KEY_PATH

        # set the HTTPS_CONFIG environment variable to the content of the https.conf.template
        HTTPS_CONFIG=$(envsubst < /etc/nginx/https.conf.template)
        export HTTPS_CONFIG
        # Substitute the HTTPS_CONFIG in the default.conf.template with content from https.conf.template
        envsubst '${HTTPS_CONFIG}' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf
    fi

    if [ "${NGINX_ENABLE_CERTBOT_CHALLENGE}" = "true" ]; then
        ACME_CHALLENGE_LOCATION='location /.well-known/acme-challenge/ { root /var/www/html; }'
    else
        ACME_CHALLENGE_LOCATION=''
    fi
    export ACME_CHALLENGE_LOCATION

    env_vars=$(printenv | cut -d= -f1 | sed 's/^/$/g' | paste -sd, -)

    envsubst "$env_vars" < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf
    envsubst "$env_vars" < /etc/nginx/proxy.conf.template > /etc/nginx/proxy.conf

    #envsubst < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf
    mkdir -p /tmp/nginx-conf
    envsubst < /etc/nginx/conf.d/default.conf.template > /tmp/nginx-conf/default.conf
    cp /tmp/nginx-conf/default.conf /etc/nginx/conf.d/default.conf
    # Start Nginx using the default entrypoint
    exec nginx -g 'daemon off;'
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: nginx
  name: nginx-cm4
  namespace: dify
---
apiVersion: v1
data:
  .gitkeep: ""
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: nginx
  name: nginx-cm5
  namespace: dify
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: dify
  labels:
    app: nginx
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      automountServiceAccountToken: false
      containers:
      - name: nginx
        image: nginx:latest
        envFrom:
          - configMapRef:
              name: dify-config
        ports:
          - containerPort: 80
          - containerPort: 443
        volumeMounts:
          - mountPath: /etc/nginx/nginx.conf.template
            name: nginx-cm0
            subPath: nginx.conf.template
          - mountPath: /etc/nginx/proxy.conf.template
            name: nginx-cm1
            subPath: proxy.conf.template
          - mountPath: /etc/nginx/https.conf.template
            name: nginx-cm2
            subPath: https.conf.template
          - mountPath: /etc/nginx/conf.d/default.conf.template  # 挂载为单个文件
            subPath: default.conf.template
            name: nginx-cm3
          - mountPath: /docker-entrypoint-mount.sh
            name: nginx-cm4
            subPath: docker-entrypoint-mount.sh
          - mountPath: /etc/ssl
            name: nginx-cm5
          - mountPath: /etc/letsencrypt/live
            name: nginx-claim6
          - mountPath: /etc/letsencrypt
            name: nginx-claim7
          - mountPath: /var/www/html
            name: nginx-claim8
        command: [ "sh","-c","cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
      volumes:
        - configMap:
            items:
              - key: nginx.conf.template
                path: nginx.conf.template
            name: nginx-cm0
          name: nginx-cm0
        - configMap:
            items:
              - key: proxy.conf.template
                path: proxy.conf.template
            name: nginx-cm1
          name: nginx-cm1
        - configMap:
            items:
              - key: https.conf.template
                path: https.conf.template
            name: nginx-cm2
          name: nginx-cm2
        - configMap:
            items:
              - key: default.conf.template
                path: default.conf.template
            name: nginx-cm3
          name: nginx-cm3
        - configMap:
            items:
              - key: docker-entrypoint.sh
                path: docker-entrypoint-mount.sh
            name: nginx-cm4
          name: nginx-cm4
        - configMap:
            name: nginx-cm5
          name: nginx-cm5
        - name: nginx-claim6
          persistentVolumeClaim:
            claimName: nginx-claim6
        - name: nginx-claim7
          persistentVolumeClaim:
            claimName: nginx-claim7
        - name: nginx-claim8
          persistentVolumeClaim:
            claimName: nginx-claim8
---
kind: Service
apiVersion: v1
metadata:
  name: nginx
  namespace: dify
spec:
  selector:
    app: nginx
  type: ClusterIP
  ports:
  - name: nginx
    port: 80
    targetPort: 80
---
kind: Service
apiVersion: v1
metadata:
  name: nginx-nodeport
  namespace: dify
spec:
  selector:
    app: nginx
  type: NodePort
  ports:
  - name: nginx
    port: 80
    targetPort: 80
    nodePort: 31234
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: nginx-claim6
  name: nginx-claim6
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: nginx-claim7
  name: nginx-claim7
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: nginx-claim8
  name: nginx-claim8
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plugin-daemon
  namespace: dify
  labels:
    app: plugin-daemon
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: plugin-daemon
  template:
    metadata:
      labels:
        app: plugin-daemon
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      automountServiceAccountToken: false
      containers:
        - name: plugin-daemon
          image: langgenius/dify-plugin-daemon:0.0.7-local
          envFrom:
            - configMapRef:
                name: dify-config
          env:
            - name: DB_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: DB_PLUGIN_DATABASE
            - name: SERVER_PORT
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_DAEMON_PORT
            - name: SERVER_KEY
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_DAEMON_KEY
            - name: MAX_PLUGIN_PACKAGE_SIZE
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_MAX_PACKAGE_SIZE
            - name: PPROF_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_PPROF_ENABLED
            - name: DIFY_INNER_API_URL
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_DIFY_INNER_API_URL
            - name: DIFY_INNER_API_KEY
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_DIFY_INNER_API_KEY
            - name: PLUGIN_REMOTE_INSTALLING_HOST
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_DEBUGGING_HOST
            - name: PLUGIN_REMOTE_INSTALLING_PORT
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_DEBUGGING_PORT
            - name: PLUGIN_WORKING_PATH
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_WORKING_PATH
            - name: FORCE_VERIFYING_SIGNATURE
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: FORCE_VERIFYING_SIGNATURE
            - name: PYTHON_ENV_INIT_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_PYTHON_ENV_INIT_TIMEOUT
            - name: PLUGIN_MAX_EXECUTION_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_MAX_EXECUTION_TIMEOUT
            - name: PIP_MIRROR_URL
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PIP_MIRROR_URL
            - name: S3_USE_AWS_MANAGED_IAM
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_S3_USE_AWS_MANAGED_IAM
            - name: S3_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_S3_ENDPOINT
            - name: S3_USE_PATH_STYLE
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_S3_USE_PATH_STYLE
            - name: AWS_ACCESS_KEY
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_AWS_ACCESS_KEY
            - name: PAWS_SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_PAWS_SECRET_KEY
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_AWS_REGION
            - name: AZURE_BLOB_STORAGE_CONNECTION_STRING
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_AZURE_BLOB_STORAGE_CONNECTION_STRING
            - name: AZURE_BLOB_STORAGE_CONTAINER_NAME
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_AZURE_BLOB_STORAGE_CONTAINER_NAME
            - name: TENCENT_COS_SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_TENCENT_COS_SECRET_KEY
            - name: TENCENT_COS_SECRET_ID
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_TENCENT_COS_SECRET_ID
            - name: TENCENT_COS_REGION
              valueFrom:
                configMapKeyRef:
                  name: dify-config
                  key: PLUGIN_TENCENT_COS_REGION
          ports:
            - containerPort: 5003
              protocol: TCP
              name: debug-port
            - containerPort: 5002
              protocol: TCP
              name: service-port
          volumeMounts:
            - mountPath: /app/storage
              name: plugin-daemon-storage
      volumes:
        - name: plugin-daemon-storage
          persistentVolumeClaim:
            claimName: plugin-daemon-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: plugin-daemon
  namespace: dify
spec:
  type: ClusterIP
  selector:
    app: plugin-daemon
  ports:
  - port: 5003
    targetPort: 5003
    protocol: TCP
    name: debug-port
  - port: 5002
    targetPort: 5002
    protocol: TCP
    name: service-port
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: plugin-daemon-pvc
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---