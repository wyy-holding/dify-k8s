apiVersion: v1
data:
  nginx.conf.template: |-
    # Please do not directly edit this file. Instead, modify the .env variables related to NGINX configuration.

    user  nginx;
    worker_processes  ${NGINX_WORKER_PROCESSES};

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  ${NGINX_KEEPALIVE_TIMEOUT};

        #gzip  on;
        client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE};

        include /etc/nginx/conf.d/*.conf;
    }
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: nginx
  name: nginx-cm0
  namespace: dify
---
apiVersion: v1
data:
  proxy.conf.template: |
    # Please do not directly edit this file. Instead, modify the .env variables related to NGINX configuration.

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_buffering off;
    proxy_read_timeout ${NGINX_PROXY_READ_TIMEOUT};
    proxy_send_timeout ${NGINX_PROXY_SEND_TIMEOUT};
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: nginx
  name: nginx-cm1
  namespace: dify
---
apiVersion: v1
data:
  https.conf.template: |-
    # Please do not directly edit this file. Instead, modify the .env variables related to NGINX configuration.

    listen ${NGINX_SSL_PORT} ssl;
    ssl_certificate ${SSL_CERTIFICATE_PATH};
    ssl_certificate_key ${SSL_CERTIFICATE_KEY_PATH};
    ssl_protocols ${NGINX_SSL_PROTOCOLS};
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: nginx
  name: nginx-cm2
  namespace: dify
---
apiVersion: v1
data:
  default.conf.template: |
    # Please do not directly edit this file. Instead, modify the .env variables related to NGINX configuration.

    server {
        listen ${NGINX_PORT};
        server_name ${NGINX_SERVER_NAME};

        location /console/api {
          proxy_pass http://api:5001;
          include proxy.conf;
        }

        location /api {
          proxy_pass http://api:5001;
          include proxy.conf;
        }

        location /v1 {
          proxy_pass http://api:5001;
          include proxy.conf;
        }

        location /files {
          proxy_pass http://api:5001;
          include proxy.conf;
        }

        location /explore {
          proxy_pass http://web:3000;
          include proxy.conf;
        }

        location /e/ {
          proxy_pass http://plugin-daemon:5002;
          proxy_set_header Dify-Hook-Url $scheme://$host$request_uri;
          include proxy.conf;
        }

        location / {
          proxy_pass http://web:3000;
          include proxy.conf;
        }

        # placeholder for acme challenge location
        ${ACME_CHALLENGE_LOCATION}

        # placeholder for https config defined in https.conf.template
        ${HTTPS_CONFIG}
    }
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: nginx
  name: nginx-cm3
  namespace: dify
---
apiVersion: v1
data:
  docker-entrypoint.sh: |-
    #!/bin/bash

    if [ "${NGINX_HTTPS_ENABLED}" = "true" ]; then
        # Check if the certificate and key files for the specified domain exist
        if [ -n "${CERTBOT_DOMAIN}" ] && \
           [ -f "/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_FILENAME}" ] && \
           [ -f "/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_KEY_FILENAME}" ]; then
            SSL_CERTIFICATE_PATH="/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_FILENAME}"
            SSL_CERTIFICATE_KEY_PATH="/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_KEY_FILENAME}"
        else
            SSL_CERTIFICATE_PATH="/etc/ssl/${NGINX_SSL_CERT_FILENAME}"
            SSL_CERTIFICATE_KEY_PATH="/etc/ssl/${NGINX_SSL_CERT_KEY_FILENAME}"
        fi
        export SSL_CERTIFICATE_PATH
        export SSL_CERTIFICATE_KEY_PATH

        # set the HTTPS_CONFIG environment variable to the content of the https.conf.template
        HTTPS_CONFIG=$(envsubst < /etc/nginx/https.conf.template)
        export HTTPS_CONFIG
        # Substitute the HTTPS_CONFIG in the default.conf.template with content from https.conf.template
        envsubst '${HTTPS_CONFIG}' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf
    fi

    if [ "${NGINX_ENABLE_CERTBOT_CHALLENGE}" = "true" ]; then
        ACME_CHALLENGE_LOCATION='location /.well-known/acme-challenge/ { root /var/www/html; }'
    else
        ACME_CHALLENGE_LOCATION=''
    fi
    export ACME_CHALLENGE_LOCATION

    env_vars=$(printenv | cut -d= -f1 | sed 's/^/$/g' | paste -sd, -)

    envsubst "$env_vars" < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf
    envsubst "$env_vars" < /etc/nginx/proxy.conf.template > /etc/nginx/proxy.conf

    #envsubst < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf
    mkdir -p /tmp/nginx-conf
    envsubst < /etc/nginx/conf.d/default.conf.template > /tmp/nginx-conf/default.conf
    cp /tmp/nginx-conf/default.conf /etc/nginx/conf.d/default.conf
    # Start Nginx using the default entrypoint
    exec nginx -g 'daemon off;'
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: nginx
  name: nginx-cm4
  namespace: dify
---
apiVersion: v1
data:
  .gitkeep: ""
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: nginx
  name: nginx-cm5
  namespace: dify
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: dify
  labels:
    app: nginx
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      automountServiceAccountToken: false
      containers:
      - name: nginx
        image: nginx:latest
        envFrom:
          - configMapRef:
              name: dify-config
        ports:
          - containerPort: 80
          - containerPort: 443
        volumeMounts:
          - mountPath: /etc/nginx/nginx.conf.template
            name: nginx-cm0
            subPath: nginx.conf.template
          - mountPath: /etc/nginx/proxy.conf.template
            name: nginx-cm1
            subPath: proxy.conf.template
          - mountPath: /etc/nginx/https.conf.template
            name: nginx-cm2
            subPath: https.conf.template
          - mountPath: /etc/nginx/conf.d/default.conf.template  # 挂载为单个文件
            subPath: default.conf.template
            name: nginx-cm3
          - mountPath: /docker-entrypoint-mount.sh
            name: nginx-cm4
            subPath: docker-entrypoint-mount.sh
          - mountPath: /etc/ssl
            name: nginx-cm5
          - mountPath: /etc/letsencrypt/live
            name: nginx-claim6
          - mountPath: /etc/letsencrypt
            name: nginx-claim7
          - mountPath: /var/www/html
            name: nginx-claim8
        command: [ "sh","-c","cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
      volumes:
        - configMap:
            items:
              - key: nginx.conf.template
                path: nginx.conf.template
            name: nginx-cm0
          name: nginx-cm0
        - configMap:
            items:
              - key: proxy.conf.template
                path: proxy.conf.template
            name: nginx-cm1
          name: nginx-cm1
        - configMap:
            items:
              - key: https.conf.template
                path: https.conf.template
            name: nginx-cm2
          name: nginx-cm2
        - configMap:
            items:
              - key: default.conf.template
                path: default.conf.template
            name: nginx-cm3
          name: nginx-cm3
        - configMap:
            items:
              - key: docker-entrypoint.sh
                path: docker-entrypoint-mount.sh
            name: nginx-cm4
          name: nginx-cm4
        - configMap:
            name: nginx-cm5
          name: nginx-cm5
        - name: nginx-claim6
          persistentVolumeClaim:
            claimName: nginx-claim6
        - name: nginx-claim7
          persistentVolumeClaim:
            claimName: nginx-claim7
        - name: nginx-claim8
          persistentVolumeClaim:
            claimName: nginx-claim8
---
kind: Service
apiVersion: v1
metadata:
  name: nginx
  namespace: dify
spec:
  selector:
    app: nginx
  type: ClusterIP
  ports:
  - name: nginx
    port: 80
    targetPort: 80
---
kind: Service
apiVersion: v1
metadata:
  name: nginx-nodeport
  namespace: dify
spec:
  selector:
    app: nginx
  type: NodePort
  ports:
  - name: nginx
    port: 80
    targetPort: 80
    nodePort: 31234
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: nginx-claim6
  name: nginx-claim6
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: nginx-claim7
  name: nginx-claim7
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: nginx-claim8
  name: nginx-claim8
  namespace: dify
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi